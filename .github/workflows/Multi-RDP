name: Multi-RDP

on:
  workflow_dispatch:
    inputs:
      instance_count:
        description: 'Number of RDP instances to create'
        required: true
        default: '5'

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600
    strategy:
      matrix:
        instance: [1, 2, 3, 4, 5]
      fail-fast: false
      max-parallel: 5

    steps:
      - name: Configure Core RDP Settings
        run: |
          # Enable Remote Desktop and disable Network Level Authentication
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force

          # Remove any existing firewall rule
          netsh advfirewall firewall delete rule name="RDP-Tailscale" 2>$null
          
          # Allow incoming connection on port 3389
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389

          # Restart the Remote Desktop service
          Restart-Service -Name TermService -Force
          Write-Host "RDP configured successfully"

      - name: Create RDP User
        run: |
          $username = "RDP"
          $password = "Khizar@123"
          
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          
          # Remove user if exists
          if (Get-LocalUser -Name $username -ErrorAction SilentlyContinue) {
              Remove-LocalUser -Name $username -Force
              Write-Host "Existing user removed"
          }
          
          # Create new user
          New-LocalUser -Name $username -Password $securePass -AccountNeverExpires -PasswordNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member $username
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username
          
          Write-Host "User '$username' created successfully"

      - name: Install Chrome
        run: |
          Write-Host "Downloading Chrome..."
          $chromeUrl = "https://dl.google.com/chrome/install/standalonesetup64.exe"
          $installerPath = "$env:TEMP\chrome_installer.exe"
          
          Invoke-WebRequest -Uri $chromeUrl -OutFile $installerPath
          
          Write-Host "Installing Chrome..."
          Start-Process -FilePath $installerPath -Args "/silent /install" -Wait
          
          Remove-Item $installerPath -Force
          Write-Host "Chrome installed successfully"

      - name: Install Comet Browser
        run: |
          Write-Host "Downloading Comet Browser..."
          
          try {
              # Try multiple potential download URLs
              $cometUrls = @(
                  "https://updates.comet.co/download/windows/x64",
                  "https://download.comet.co/windows/Comet-Setup.exe",
                  "https://comet.co/download/windows"
              )
              
              $installerPath = "$env:TEMP\comet_installer.exe"
              $downloaded = $false
              
              foreach ($url in $cometUrls) {
                  try {
                      Write-Host "Trying: $url"
                      Invoke-WebRequest -Uri $url -OutFile $installerPath -TimeoutSec 30 -ErrorAction Stop
                      $downloaded = $true
                      Write-Host "Download successful from: $url"
                      break
                  } catch {
                      Write-Host "Failed from this URL, trying next..."
                      continue
                  }
              }
              
              if ($downloaded -and (Test-Path $installerPath)) {
                  Write-Host "Installing Comet Browser..."
                  # Try different silent install arguments
                  Start-Process -FilePath $installerPath -ArgumentList "/VERYSILENT", "/NORESTART" -Wait -NoNewWindow
                  
                  Start-Sleep -Seconds 3
                  Remove-Item $installerPath -Force -ErrorAction SilentlyContinue
                  Write-Host "Comet Browser installation completed"
              } else {
                  Write-Warning "Could not download Comet Browser"
              }
          } catch {
              Write-Warning "Comet Browser installation skipped: $_"
              Write-Host "Continuing without Comet Browser..."
          }

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          
          Write-Host "Downloading Tailscale..."
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          
          Write-Host "Installing Tailscale..."
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          
          Remove-Item $installerPath -Force
          Write-Host "Tailscale installed successfully"

      - name: Connect to Tailscale
        run: |
          $hostname = "rdp-instance-${{ matrix.instance }}-run-${{ github.run_number }}"
          Write-Host "Connecting to Tailscale with hostname: $hostname"
          
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=$hostname
          
          # Wait for IP assignment
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 15) {
              Start-Sleep -Seconds 3
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              $retries++
              Write-Host "Attempt $retries : Waiting for Tailscale IP..."
          }
          
          if (-not $tsIP) {
              Write-Error "Failed to get Tailscale IP"
              exit 1
          }
          
          Write-Host "Tailscale IP assigned: $tsIP"
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          echo "HOSTNAME=$hostname" >> $env:GITHUB_ENV

      - name: Setup Auto-Launch Browsers
        run: |
          # Create startup script for browsers
          $startupFolder = "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp"
          $scriptPath = "$startupFolder\OpenBrowsers.bat"
          
          $browserScript = @'
@echo off
timeout /t 8 /nobreak >nul

REM Launch Chrome with your link
if exist "C:\Program Files\Google\Chrome\Application\chrome.exe" (
    start "" "C:\Program Files\Google\Chrome\Application\chrome.exe" "https://pplx.ai/khizar-nisar"
    echo Chrome launched
)

REM Wait before launching Comet
timeout /t 3 /nobreak >nul

REM Launch Comet Browser if installed
if exist "%LOCALAPPDATA%\Programs\Comet\Comet.exe" (
    start "" "%LOCALAPPDATA%\Programs\Comet\Comet.exe"
    echo Comet Browser launched
) else if exist "C:\Program Files\Comet\Comet.exe" (
    start "" "C:\Program Files\Comet\Comet.exe"
    echo Comet Browser launched
) else if exist "%APPDATA%\Comet\Comet.exe" (
    start "" "%APPDATA%\Comet\Comet.exe"
    echo Comet Browser launched
)
'@
          
          $browserScript | Out-File -FilePath $scriptPath -Encoding ASCII -Force
          Write-Host "Browser auto-launch configured (Chrome + Comet)"
          
          # Launch Chrome now for current session
          Start-Sleep -Seconds 2
          Start-Process "C:\Program Files\Google\Chrome\Application\chrome.exe" -ArgumentList "https://pplx.ai/khizar-nisar" -ErrorAction SilentlyContinue
          Write-Host "Chrome launched with pplx.ai/khizar-nisar"
          
          # Try to launch Comet now
          $cometPaths = @(
              "$env:LOCALAPPDATA\Programs\Comet\Comet.exe",
              "C:\Program Files\Comet\Comet.exe",
              "$env:APPDATA\Comet\Comet.exe"
          )
          
          foreach ($path in $cometPaths) {
              if (Test-Path $path) {
                  Start-Sleep -Seconds 2
                  Start-Process $path -ErrorAction SilentlyContinue
                  Write-Host "Comet Browser launched from: $path"
                  break
              }
          }
          Write-Host "Both browsers configured for auto-launch"
      
      - name: Verify RDP Connection
        run: |
          Write-Host "Verifying RDP on $env:TAILSCALE_IP..."
          
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389 -WarningAction SilentlyContinue
          
          if ($testResult.TcpTestSucceeded) {
              Write-Host "✓ RDP port is accessible"
          } else {
              Write-Warning "RDP port test failed, but continuing..."
          }

      - name: Export Credentials to File
        run: |
          $credFile = "C:\RDP_Credentials.txt"
          $content = @"
═══════════════════════════════════════════════════════════
  RDP INSTANCE ${{ matrix.instance }} CREDENTIALS
═══════════════════════════════════════════════════════════
  Hostname     : $env:HOSTNAME
  IP Address   : $env:TAILSCALE_IP
  Username     : RDP
  Password     : Khizar@123
  Port         : 3389
  
  Connect Command:
  mstsc /v:$env:TAILSCALE_IP
  
  Created      : $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
═══════════════════════════════════════════════════════════

"@
          
          $content | Out-File -FilePath $credFile -Encoding UTF8 -Force
          Write-Host "Credentials saved to: $credFile"
          
          # Upload as artifact
          echo "CRED_FILE=$credFile" >> $env:GITHUB_ENV

      - name: Upload Credentials Artifact
        uses: actions/upload-artifact@v3
        with:
          name: rdp-credentials-instance-${{ matrix.instance }}
          path: C:\RDP_Credentials.txt
          retention-days: 1

      - name: Keep Instance Running
        run: |
          Write-Host ""
          Write-Host "═══════════════════════════════════════════════"
          Write-Host "  RDP INSTANCE ${{ matrix.instance }} - READY"
          Write-Host "═══════════════════════════════════════════════"
          Write-Host "  Hostname : $env:HOSTNAME"
          Write-Host "  IP Address : $env:TAILSCALE_IP"
          Write-Host "  Username : RDP"
          Write-Host "  Password : Khizar@123"
          Write-Host "  Chrome: pplx.ai/khizar-nisar (auto-opens)"
          Write-Host "  Comet Browser: Auto-launches on login"
          Write-Host "═══════════════════════════════════════════════"
          Write-Host ""
          
          $counter = 0
          while ($true) {
              $counter++
              $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
              Write-Host "[$timestamp] Instance ${{ matrix.instance }} Active (Heartbeat #$counter)"
              Start-Sleep -Seconds 300
          }

  consolidate-credentials:
    needs: secure-rdp
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Download All Credentials
        uses: actions/download-artifact@v3
        with:
          path: credentials
      
      - name: Consolidate Credentials File
        run: |
          echo "═══════════════════════════════════════════════════════════" > ALL_RDP_CREDENTIALS.txt
          echo "  ALL RDP INSTANCES - CONSOLIDATED CREDENTIALS" >> ALL_RDP_CREDENTIALS.txt
          echo "  Run Number: ${{ github.run_number }}" >> ALL_RDP_CREDENTIALS.txt
          echo "  Generated: $(date '+%Y-%m-%d %H:%M:%S')" >> ALL_RDP_CREDENTIALS.txt
          echo "═══════════════════════════════════════════════════════════" >> ALL_RDP_CREDENTIALS.txt
          echo "" >> ALL_RDP_CREDENTIALS.txt
          
          for dir in credentials/*/; do
            if [ -f "${dir}RDP_Credentials.txt" ]; then
              cat "${dir}RDP_Credentials.txt" >> ALL_RDP_CREDENTIALS.txt
            fi
          done
          
          echo "" >> ALL_RDP_CREDENTIALS.txt
          echo "═══════════════════════════════════════════════════════════" >> ALL_RDP_CREDENTIALS.txt
          echo "  QUICK CONNECT GUIDE:" >> ALL_RDP_CREDENTIALS.txt
          echo "  1. Make sure you're connected to Tailscale" >> ALL_RDP_CREDENTIALS.txt
          echo "  2. Open Remote Desktop (mstsc)" >> ALL_RDP_CREDENTIALS.txt
          echo "  3. Enter the IP address from above" >> ALL_RDP_CREDENTIALS.txt
          echo "  4. Use Username: RDP, Password: Khizar@123" >> ALL_RDP_CREDENTIALS.txt
          echo "  5. Chrome opens to pplx.ai/khizar-nisar automatically" >> ALL_RDP_CREDENTIALS.txt
          echo "  6. Comet Browser also auto-launches on login" >> ALL_RDP_CREDENTIALS.txt
          echo "═══════════════════════════════════════════════════════════" >> ALL_RDP_CREDENTIALS.txt
          
          cat ALL_RDP_CREDENTIALS.txt
      
      - name: Upload Consolidated Credentials
        uses: actions/upload-artifact@v3
        with:
          name: ALL-RDP-CREDENTIALS
          path: ALL_RDP_CREDENTIALS.txt
          retention-days: 1
